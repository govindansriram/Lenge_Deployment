{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nexport const register = newUser => {\n  return axios.post(\"http://localhost:8000/users/register\", {\n    first_name: newUser.first_name,\n    last_name: newUser.last_name,\n    email: newUser.email,\n    password: newUser.password\n  }).then(response => {\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const login = user => {\n  return axios.post(\"http://localhost:8000/users/login\", {\n    email: user.email,\n    password: user.password\n  }).then(response => {\n    localStorage.setItem(\"usertoken\", response.data.token);\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const addCardio = workout => {\n  const theToken = localStorage.getItem(\"usertoken\");\n  const decodedToken = jwt_decode(theToken);\n  const email = decodedToken.identity.email;\n  return axios.post(\"http://localhost:8000/add_cardio:\" + email, {\n    user_cardio: workout\n  }).then(response => {\n    return response;\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const addStrength = workout => {\n  const theToken = localStorage.getItem(\"usertoken\");\n  const decodedToken = jwt_decode(theToken);\n  const email = decodedToken.identity.email;\n  return axios.post(\"http://localhost:8000/add_workout:\" + email, {\n    user_workouts: workout\n  }).then(response => {\n    return response;\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const emailWorkout = (email, title, body) => {\n  fetch('http://localhost:4000/mail', {\n    method: \"POST\",\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email,\n      title: title,\n      body: body\n    })\n  }).catch(error => console.log(error));\n};","map":{"version":3,"sources":["/Users/sriramgovindan/Desktop/Lenge_application/src/components/UserFunctions.js"],"names":["axios","jwt_decode","register","newUser","post","first_name","last_name","email","password","then","response","data","catch","err","console","log","login","user","localStorage","setItem","token","addCardio","workout","theToken","getItem","decodedToken","identity","user_cardio","addStrength","user_workouts","emailWorkout","title","body","fetch","method","mode","headers","JSON","stringify","error"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const register = newUser => {\n  return axios\n    .post(\"http://localhost:8000/users/register\", {\n      first_name: newUser.first_name,\n      last_name: newUser.last_name,\n      email: newUser.email,\n      password: newUser.password\n    })\n    .then(response => {\n      return response.data;\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const login = user => {\n  return axios\n    .post(\"http://localhost:8000/users/login\", {\n      email: user.email,\n      password: user.password\n    })\n    .then(response => {\n      localStorage.setItem(\"usertoken\", response.data.token);\n      return response.data;\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const addCardio = workout => {\n  const theToken = localStorage.getItem(\"usertoken\");\n  const decodedToken = jwt_decode(theToken);\n\n  const email = decodedToken.identity.email;\n\n  return axios\n    .post(\"http://localhost:8000/add_cardio:\" + email, {\n      user_cardio: workout\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const addStrength = workout => {\n    const theToken = localStorage.getItem(\"usertoken\");\n    const decodedToken = jwt_decode(theToken);\n  \n    const email = decodedToken.identity.email;\n  \n    return axios\n      .post(\"http://localhost:8000/add_workout:\" + email, {\n        user_workouts: workout\n      })\n      .then(response => {\n        return response;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  export const emailWorkout = (email, title, body) => {\n    fetch('http://localhost:4000/mail', {\n        method: \"POST\",\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email: email, title: title, body: body})\n    }).catch(error => console.log(error))\n}\n\n"]},"metadata":{},"sourceType":"module"}